% Tents can be placed in any free spot.
{tent(X,Y):free(X,Y)}.

% Tents cannot be placed beyond the boundaries of the grid
:- tent(X,Y), lines(Z), X>Z.
:- tent(X,Y), columns(Z), Y>Z.

% Anything is a spot.
spot(X,Y) :- free(X,Y).
spot(X,Y) :- tree(X,Y).
spot(X,Y) :- tent(X,Y).

% Define directly bordering (not diagonally) with symmetry.
bordering(X,Y,M,N) :- spot(X,Y), M=X, N=Y+1.
bordering(X,Y,M,N) :- spot(X,Y), M=X+1, N=Y.
bordering(X,Y,M,N) :- spot(X,Y), M=X, N=Y-1.
bordering(X,Y,M,N) :- spot(X,Y), M=X-1, N=Y.
bordering(X,Y,M,N) :- bordering(M,N,X,Y).

% Define adjacent by adding diagonals.
adjacent(X,Y,M,N) :- bordering(X,Y,M,N).
adjacent(X,Y,M,N) :- spot(X,Y), M=X+1, N=Y+1.
adjacent(X,Y,M,N) :- spot(X,Y), M=X+1, N=Y-1.
adjacent(X,Y,M,N) :- spot(X,Y), M=X-1, N=Y+1.
adjacent(X,Y,M,N) :- spot(X,Y), M=X-1, N=Y-1.
adjacent(X,Y,M,N) :- adjacent(M,N,X,Y).

% For every tree there must be at least one bordering tent.
1 {tent(X,Y):bordering(X,Y,M,N)} :- tree(M,N).

% Tents cannot be adjacent to one another.
:- tent(X,Y), adjacent(X,Y,M,N), tent(M,N).

% The total number of tents in each row must be equal to the given number.
R {tent(X,Y):spot(X,Y)} R :- rowsum(X,R).

% The total number of tents in each column must be equal to the given number.
R {tent(X,Y):spot(X,Y)} R :- colsum(Y,R).

% If the problem is well-defined, i.e. the numbers given for rowsums and colsums
% add up to the total number of trees, these are not necessary. However, if the
% problem is ill-defined, without these clauses a solution that allows tents to
% serve more than one tree would still be allowed. Furthermore, the problem as
% specified on Moodle doesn't impose any constraint on tents not being bordering
% trees. Therefore here we use "greater than or equal" because solutions
% might be possible where some tents aren't bordering any trees.

% Total number of tents should be equal to or greater than the number of trees.
R {tent(X,Y):spot(X,Y)} :- totaltrees(R).

% Define recursive connections between chains of trees and tents
connected(X,Y,W,Z) :- tree(X,Y), tent(W,Z), bordering(X,Y,W,Z).
connected(X,Y,W,Z) :- connected(X,Y,M,N), connected(M,N,W,Z).
connected(X,Y,W,Z) :- connected(W,Z,X,Y).

% Each tent can only serve one tree, modelled in such a way that when a chain of connections is present,
% the number of connected tents must always be greater than the number of connected trees
% (because we don't count the starting tree).
:- tree(X,Y), {tree(W,Z):connected(X,Y,W,Z),(W,Z)!=(X,Y)} = R, {tent(M,N):connected(X,Y,M,N)} <= R.

% We only care about tents placements.
#show tent/2.